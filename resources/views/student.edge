@layout('layouts/app')
@set('title', 'students page')
@section('students')
<section class="h-full w-full z-[5] relative flex flex-col px-11 pt-5">
  <div class="flex flex-col z-10">
    <p class="text-xl font-bold">{{studentUser.firstname + " " + studentUser.lastname}}</p>
    <p class="text-base">{{studentUser.user_id}}</p>
    <a href="{{ route('/student/:id/information', { id: studentUser.user_id }) }}" class="link link-primary">Student information</a>
  </div>
  @if(auth.user.role === "student" && !studentUser.student.plan)
    <div class="w-full h-full absolute top-0 flex justify-center items-center">
      <img src="{{ asset('assets/images/waiting.gif') }}" class="w-24 h-24"/>  
      <p class="text-3xl text-gray-400">Wait for staff assign your plan</p>
      <img src="{{ asset('assets/images/waiting.gif') }}" class="w-24 h-24"/>  
    </div>
  @end

  <div class="flex mt-5">
    @if(auth.user.role === "student")
      <p class="font-bold whitespace-nowrap">{{studentUser.student.plan ? studentUser.student.plan + " month" : "" }}</p>
    @else
    <form id="planForm" method="POST" action="/api/user/student/{{studentUser.user_id}}?_method=PATCH" class="flex space-x-2">
      <select {{disabled}} id="study" name="study"
      class="select select-sm rounded-xl select-bordered h-9 px-4 lg:text-base w-full max-w-xs">

      <option disabled selected>{{studentUser.student.plan ? studentUser.student.plan + " month" : "Choose plan"}}</option>
      @each(plan in plans)
        <option value={{ plan }}>{{ plan + " month" }}</option>
      @end
    </select>
      @if(disabled)
        <button id="editButton" class="btn btn-sm btn-primary rounded-3xl text-white capitalize" onclick="editPlan(event)">edit</button>
      @else
        <button id="submitButton" class="btn btn-sm btn-primary rounded-3xl text-white capitalize">submit</button>
      @end
    </form>
    @end
    @if(studentUser.student.plan)
    <div class="w-full flex justify-center">
      <ul class="steps w-full max-w-md lg:max-w-lg xl:max-w-xl 2xl:max-w-2xl">
        @each((step,index) in steps)
            <li class="after:cursor-pointer step font-bold {{nextStep.steps === step.steps && "after:border-4 after:border-[#F4C064]"}} {{step.status === "Pending" ? "text-yellow-700 step-primary" : step.status === "Approve" || step.steps === "Accepted by firm"? "text-green-700 step-primary" : step.status === "Not Approve" ? "text-red-700 step-primary" : ""}}">{{step.steps}} {{step.status ? step.status : ""}}</li>
        @end
    </ul>
    </div>
    @end
  </div>
  @if(studentUser.student.plan)
  <div class="flex flex-wrap w-full space-x-5 pt-9 justify-center">
    {{--  <div class="grid grid-cols-2 gap-y-3 gap-x-2 h-fit">
      @each(info in studentInfo)
      <p class="font-bold">{{info}}</p>
      <p class="break-words">-</p>
      @end
      @if(auth.user.role === "staff")
      <a href="{{ route('/student/:id/edit', { id: studentUser.user_id }) }}" class="underline">Edit student info</a>
      @end
    </div>  --}}
    <div>
      <canvas id="pdfViewer" class="bg-[#DDE2E5] h-96 w-72"></canvas>
      <div class="mt-2">
        <button id="prev" class="btn btn-sm btn-primary rounded-3xl text-white">Previous</button>
        <button id="next" class="btn btn-sm btn-primary rounded-3xl text-white">Next</button>
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
      </div>
    </div>
    
    <div class="flex flex-col pt-5">
      <form id="formElem">
        <div class="flex space-x-2">
          <p class="font-bold">{{nextStep.steps}}</p>
          @if(currentSteps.status === "Not Approve")
          <p class="font-semibold">(Waiting for resubmit)</p>
          @end
          @if(currentSteps.steps != "Accepted by firm" && currentSteps.status != "Approve")
          <a class="link link-primary" href="/api/file/steps?userId={{studentUser.user_id}}&&docId={{currentSteps.steps}}&&prev=prev">Open PDF file</a>
          @end
        </div> 
        <p>{{currentSteps.status ==="Pending" || "Not approve" ? "Submitted: " + currentSteps.createAt : "Not Submitted"}}</p>
        @if(currentSteps.status ==="Not Approve")
        <div class="flex flex-col mt-5">
          <p class="font-bold text-red-500">{{nextStep.steps}} disapprove</p>
          <p>{{currentSteps.reason}}</p>
        </div> 
        @end
        @if(auth.user.role === "student")
          <input type="file" id="myPdf" class="mt-5" /><br>
          <button class="btn btn-sm btn-primary rounded-3xl text-white mt-2">submit</button>
        @end
      </form>
      <form id="formElem2">
        @if(auth.user.role != "student" && currentSteps.status != "Approve" && currentSteps.status != "Not Approve" && currentSteps.steps != "Accepted by firm")
        <div class="flex mt-5" id="radio-group">
          <div class="form-control w-fit">
            <label class="label cursor-pointer space-x-2">
              <input type="radio" id="approve" name="radio" value="Approve" class="radio checked:bg-blue-500" checked onclick="removeTextArea()"/>
              <span class="label-text font-bold">Approve</span> 
            </label>
          </div>   
          <div class="form-control w-fit">
            <label class="label cursor-pointer space-x-2">
              <input type="radio" id="not-approve" name="radio" value="Not Approve" class="radio checked:bg-blue-500" onclick="showTextArea()"/>
              <span class="label-text font-bold text-red-500">Not Approve</span> 
            </label>
          </div>  
        </div>
        {{--  <textarea id="content" name="content" class="p-3 w-full h-28 text-xs rounded-lg" placeholder="Write your content..."></textarea>  --}}
        <button class="btn btn-sm btn-primary rounded-3xl text-white">confirm</button>
        @end
          {{--  <button class="btn btn-sm btn-primary rounded-3xl text-white">not approve</button>
          <textarea onkeyup="validateInput()" id="no_approve_reason" name="no_approve_reason" class="p-3 w-full h-28 text-xs rounded-lg border-2 border-red-500 placeholder="Write your content...">{{post ? post.content : ''}}</textarea>  --}}
    </form>
    </div>
  </div>
  @end
</section>
<script>
  const showTextArea = () => {
    const c = document.getElementById("reason")
    if(c) return
    const referenceNode = document.getElementById("radio-group")
    const ele = document.createElement("textarea")
    ele.id = "reason"
    ele.name = "reason"
    ele.className = "p-3 w-full h-28 text-xs rounded-lg"
    ele.placeholder = "Write your reasons why not approve..."
    referenceNode.parentNode.insertBefore(ele, referenceNode.nextSibling);
  }
  const removeTextArea = () => {
    const c = document.getElementById("reason")
    if(c) c.remove()
  }
  const editPlan = (event) => {
    event.preventDefault()
    document.getElementById("study").disabled = false;
    document.getElementById("editButton").remove()
    const ele = document.createElement("button")
    ele.id = "submitButton"
    ele.className = "btn btn-sm btn-primary rounded-3xl text-white"
    ele.innerHTML = "submit"
    document.getElementById("planForm").appendChild(ele)
  }
  let pdfFile
  const input = document.getElementById("myPdf")
  if(input){  
    input.onchange = (e) => {
    const [file] = e.target.files
    pdfFile = file
  }
  }
  const formElem2 = document.getElementById('formElem2')
  if(formElem2)
  formElem2.onsubmit = async (event) => {
    event.preventDefault() 
    const status = document.querySelector('input[name="radio"]:checked').value
    const body = {
      status : status,
      doc: '{{nextStep.steps}}' ? '{{nextStep.steps}}' : 'TR-01',
      reason : status === "Approve" ? "" : document.getElementById('reason').value
    }

    await fetch('/api/user/student/{{studentUser.user_id}}?_method=PATCH', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body),
    })
    
    window.location.reload()
  };
  const formElem = document.getElementById('formElem')
  if(formElem)
  formElem.onsubmit = async (event) => {
    event.preventDefault() 
    // if(!pdfFile) return
    const body = {
      status : 'Pending',
      doc: '{{nextStep.steps}}' ? '{{nextStep.steps}}' : 'TR-01',
    }
    const formData = new FormData(formElem)
    formData.append('files', pdfFile)
    formData.append('docId', '{{nextStep.steps}}')
    formData.append('studentId', {{studentUser.user_id}})
    await fetch('/api/file/steps?_method=POST', {
        method: 'POST',
        body: formData,
    })
    await fetch('/api/user/student/{{studentUser.user_id}}?_method=PATCH', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body),
    })
    
    window.location.reload()
  };

var url ='/api/file/steps?userId={{studentUser.user_id}}&&docId={{currentSteps.steps}}' 
    // Loaded via <script> tag, create shortcut to access PDF.js exports.
var pdfjsLib = window['pdfjs-dist/build/pdf'];

pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://mozilla.github.io/pdf.js/build/pdf.worker.js';  
var pdfDoc = null,
    pageNum = 1,
    pageRendering = false,
    pageNumPending = null,
    scale = 0.8,
    canvas = document.getElementById('pdfViewer'),
    ctx = canvas.getContext('2d');

function renderPage(num) {
  pageRendering = true;
  // Using promise to fetch the page
  pdfDoc.getPage(num).then(function(page) {
    var viewport = page.getViewport({scale: scale});
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    // Render PDF page into canvas context
    var renderContext = {
      canvasContext: ctx,
      viewport: viewport
    };
    var renderTask = page.render(renderContext);

    // Wait for rendering to finish
    renderTask.promise.then(function() {
      pageRendering = false;
      if (pageNumPending !== null) {
        // New page rendering is pending
        renderPage(pageNumPending);
        pageNumPending = null;
      }
    });
  });

  // Update page counters
  document.getElementById('page_num').textContent = num;
}

/**
 * If another page rendering in progress, waits until the rendering is
 * finised. Otherwise, executes rendering immediately.
 */
function queueRenderPage(num) {
  if (pageRendering) {
    pageNumPending = num;
  } else {
    renderPage(num);
  }
}


/**
 * Displays previous page.
 */
 function onPrevPage() {
  if (pageNum <= 1) {
    return;
  }
  pageNum--;
  queueRenderPage(pageNum);
}
document.getElementById('prev').addEventListener('click', onPrevPage);

/**
 * Displays next page.
 */
function onNextPage() {
  if (pageNum >= pdfDoc.numPages) {
    return;
  }
  pageNum++;
  queueRenderPage(pageNum);
}
document.getElementById('next').addEventListener('click', onNextPage);
// The workerSrc property shall be specified.
if({{currentSteps.steps != "Accepted by firm" && currentSteps.status != "Approve"}}){
  pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
    pdfDoc = pdfDoc_;
    document.getElementById('page_count').textContent = pdfDoc.numPages;

    // Initial/first page rendering
    renderPage(pageNum);
  })
}
// if({{currentSteps.steps != "Accepted by firm" && currentSteps.status != "Approve"}}){
// var loadingTask = pdfjsLib.getDocument(url);
// loadingTask.promise.then(function(pdf) {
//   console.log('PDF loaded');
  
//   // Fetch the first page
//   var pageNumber = 1;
//   pdf.getPage(pageNumber).then(function(page) {
//     console.log('Page loaded');
    
//     var scale = 1.5;
//     var viewport = page.getViewport({scale: scale});

//     // Prepare canvas using PDF page dimensions
//     var canvas = document.getElementById('pdfViewer');
//     var context = canvas.getContext('2d');
//     canvas.height = viewport.height;
//     canvas.width = viewport.width;

//     // Render PDF page into canvas context
//     var renderContext = {
//       canvasContext: context,
//       viewport: viewport
//     };
//     var renderTask = page.render(renderContext);
//     renderTask.promise.then(function () {
//       console.log('Page rendered');
//     });
//   });
// }, function (reason) {
//   // PDF loading error
//   console.error(reason);
// });
// }


$("#myPdf").on("change", async function(e){
	var file = e.target.files[0]
	if(file.type == "application/pdf"){
		var fileReader = new FileReader();  
		fileReader.onload = function() {
			var pdfData = new Uint8Array(this.result);
			// Using DocumentInitParameters object to load binary data.
			// var loadingTask = pdfjsLib.getDocument({data: pdfData});
      pdfjsLib.getDocument({data: pdfData}).promise.then(function(pdfDoc_) {
        pdfDoc = pdfDoc_;
        document.getElementById('page_count').textContent = pdfDoc.numPages;

        // Initial/first page rendering
        renderPage(pageNum);
      })
			// loadingTask.promise.then(function(pdf) {
			//   console.log('PDF loaded');
			  
			//   // Fetch the first page
			//   var pageNumber = 1;
			//   pdf.getPage(pageNumber).then(function(page) {
			// 	console.log('Page loaded');
				
			// 	var scale = 1.5;
			// 	var viewport = page.getViewport({scale: scale});

			// 	// Prepare canvas using PDF page dimensions
			// 	var canvas = document.getElementById('pdfViewer');
			// 	var context = canvas.getContext('2d');
			// 	canvas.height = viewport.height;
			// 	canvas.width = viewport.width;

			// 	// Render PDF page into canvas context
			// 	var renderContext = {
			// 	  canvasContext: context,
			// 	  viewport: viewport
			// 	};
			// 	var renderTask = page.render(renderContext);
			// 	renderTask.promise.then(function () {
			// 	  console.log('Page rendered');
			// 	});
			//   });
			// }, function (reason) {
			//   // PDF loading error
			//   console.error(reason);
			// });
		};
		fileReader.readAsArrayBuffer(file);
	}
});
</script>
@end